<project basedir="." name="FUC Backend" default="help" xmlns:jacoco="antlib:org.jacoco.ant">
	<!-- === load the properties === -->
	<loadproperties srcFile="../build.properties" />

	<!-- === import paths === -->
	<import file="path.xml" />

	<!-- === print a help message when called === -->
	<target name="help" description="print this help message">
		<java classname="org.apache.tools.ant.Main">
			<arg value="-p" />
			<arg value="-f" />
			<arg value="${ant.file}" />
		</java>
	</target>

	<!-- === depends on the interfaces === -->
	<target name="interfaces" description="Build the interfaces">
		<ant antfile="interfaces.xml" dir=".." target="build" inheritall="false" />
	</target>

	<!-- === clean === -->
	<target name="clean" description="clean this project">
		<delete dir="${bin.dir}" />
		<delete dir="${doc.dir}" />
	</target>

	<!-- === build === -->
	<target name="build" depends="clean, interfaces" description="build the source files">
		<mkdir dir="${bin.dir}" />
		<javac
			encoding="UTF-8"
			debug="true"
			debuglevel="lines,vars,source"
			srcdir="${src.dir}"
			destdir="${bin.dir}"
			target="1.7"
			classpathref="classpath"
			includeantruntime="false" />
		<copy todir="${bin.dir}/swp_compiler_ss13/fuc/backend/">
			<fileset dir="${src.dir}/swp_compiler_ss13/fuc/backend">
				<include name="*.ll" />
			</fileset>
		</copy>
	</target>

	<!-- === doc === -->
	<target name="doc" description="create the javadoc">
		<mkdir dir="${doc.dir}" />
		<javadoc
	    	access="private"
	    	author="true"
	    	destdir="${doc.dir}"
	    	doctitle="${ant.project.name}"
	    	nodeprecated="false"
	    	nodeprecatedlist="false"
	    	noindex="false"
	    	nonavbar="false"
	    	notree="false"
	    	source="1.7"
	    	sourcepathref="sourcepath"
			classpathref="classpath"
	    	splitindex="true"
	    	use="true"
	    	version="true"
	    	linksource="true" />
	</target>

	<!-- === build tests === -->
	<target name="build-tests" depends="build" description="build the junit tests">
		<javac
			encoding="UTF-8"
			debug="true"
			debuglevel="lines,vars,source"
			srcdir="${test.dir}"
			destdir="${bin.dir}"
			target="1.7"
			classpathref="classpath-test"
			includeantruntime="false" />
	</target>

	<!-- Java Code Coverage -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath>
			<path refid="classpath-test" />
		</classpath>
    </taskdef>

	<!-- === run tests === -->
	<target name="run-tests" depends="build-tests" description="run the junit tests">
		<mkdir dir="${test.results.dir}" />

		<jacoco:coverage destfile="${test.results.dir}/jacoco.exec">
			<junit
				printsummary="on"
				fork="yes"
				haltonerror="true"
				haltonfailure="true" >
				<jvmarg value="-Dfile.encoding=UTF-8"/>
				<classpath>
					<path refid="classpath-test" />
				</classpath>
				<batchtest todir="${test.results.dir}">
					<fileset dir="${test.dir}">
						<include name="**/TestSuite.java" />
					</fileset>
				</batchtest>
                <formatter type="plain" usefile="false" />
				<formatter type="xml" />
			</junit>
		</jacoco:coverage>

		<!-- Generate HTML report -->
		<junitreport todir="${test.results.dir}">
			<fileset dir="${test.results.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="noframes" todir="${test.reports.dir}" />
		</junitreport>

		<!-- Generate Code Coverage report
			See: http://www.eclemma.org/jacoco/trunk/doc/ant.html -->
		<jacoco:report>
			<executiondata>
				<file file="${test.results.dir}/jacoco.exec" />
			</executiondata>

			<structure name="Code coverage">
				<classfiles>
					<fileset dir="${bin.dir}">
						<include name="**/*.class" />
                        <exclude name="**/TACExecutor*.class" />
                        <exclude name="**/*Test.class" />
                        <exclude name="**/*Test$*.class" />
					</fileset>
				</classfiles>
			</structure>

			<html destdir="${test.coverage_report.dir}" />
		</jacoco:report>
	</target>

    <!-- === run runtime tests === -->
    <target name="run-tests-runtime" depends="build-tests"
            description="run the runtime junit tests. Needs LLVM Installation">
        <mkdir dir="${test.results.dir}"/>

        <junit
                printsummary="on"
                fork="yes"
                haltonerror="true"
                haltonfailure="true">
			<jvmarg value="-Dfile.encoding=UTF-8"/>
            <classpath>
                <path refid="classpath-test"/>
            </classpath>
            <batchtest todir="${test.results.dir}">
                <fileset dir="${test.dir}">
                    <include name="**/RuntimeTestSuite.java"/>
                </fileset>
            </batchtest>
            <formatter type="xml"/>
        </junit>

        <!-- Generate HTML report -->
        <junitreport todir="${test.results.dir}">
            <fileset dir="${test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${test.reports.dir}"/>
        </junitreport>
    </target>

    <!-- === run all the tests === -->
    <target name="run-tests-all" depends="build-tests, run-tests, run-tests-runtime"
            description="run all the junit tests. Needs LLVM Installation">
    </target>


</project>
