package swp_compiler_ss13.fuc.gui.ide.mvc;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;

import swp_compiler_ss13.common.ast.AST;
import swp_compiler_ss13.common.backend.Quadruple;
import swp_compiler_ss13.common.lexer.Token;

/**
 * Interface for access to the GUI panels.
 * 
 * @author "Frank Zechert"
 * 
 */
public interface IDE {
	/**
	 * Add your own menu to the menu bar
	 * 
	 * @param menu
	 *            The menu to add
	 * @param position
	 *            The position of the new menu
	 * @param displayAlways
	 *            if true the menu will be displayed all the time. if false the
	 *            menu will only be shown, when the component is currently
	 *            visible (the tab is actvie)
	 */
	public void addMenu(JMenu menu, Position position, boolean displayAlways);

	/**
	 * Add your own button to the button bar
	 * 
	 * @param button
	 *            The button to add
	 * @param position
	 *            The position of the new button
	 * @param displayAlways
	 *            if true the button will be displayed all the time. if false
	 *            the button will only be shown, when the component is currently
	 *            visible (the tab is actvie)
	 */
	public void addButton(JButton button, Position position, boolean displayAlways);

	/**
	 * Add your own label to the status bar
	 * 
	 * @param label
	 *            The label to add
	 * @param position
	 *            The position of the new label
	 * @param displayAlways
	 *            if true the label will be displayed all the time. if false the
	 *            label will only be shown, when the component is currently
	 *            visible (the tab is actvie)
	 */
	public void addStatusLabel(JLabel label, Position position, boolean displayAlways);

	/**
	 * Set the source code that is used for the compiler
	 * 
	 * @param sourceCode
	 *            the source code that should be compiled
	 */
	public void setSourceCode(String sourceCode);

	/**
	 * Run the compiler (all components) and update all gui components with new
	 * data
	 * 
	 * @param silent
	 *            if set to true no output of the compiler is shown in the gui
	 *            (no errorLog and no exceptions shown).
	 */
	public void run(boolean silent);

	/**
	 * Run the currently selected lexer component
	 * 
	 * @param sourceCode
	 *            The source code to lex
	 * @param silent
	 *            if set to true no output of the compiler is shown in the gui
	 *            (no errorLog and no exceptions shown).
	 * @return The list of tokens returned by the lexer, returns null if an
	 *         error occured
	 */
	public List<Token> runLexer(String sourceCode, boolean silent);

	/**
	 * Run the currently selected parser component
	 * 
	 * @param tokens
	 *            The token list to parse
	 * @param silent
	 *            if set to true no output of the compiler is shown in the gui
	 *            (no errorLog and no exceptions shown).
	 * @return The AST generated by the parser, returns null if an error occured
	 */
	public AST runParser(List<Token> tokens, boolean silent);

	/**
	 * Run the currently selected semantic analyser
	 * 
	 * @param ast
	 *            The ast to analyse
	 * @param silent
	 *            if set to true no output of the compiler is shown in the gui
	 *            (no errorLog and no exceptions shown).
	 * @return The ast checked by the semantic analyser, returns null if an
	 *         error occured
	 */
	public AST runSemanticAnalysis(AST ast, boolean silent);

	/**
	 * Run the currently selected intermediate code generator
	 * 
	 * @param ast
	 *            The ast to generate tac for
	 * @param silent
	 *            if set to true no output of the compiler is shown in the gui
	 *            (no errorLog and no exceptions shown).
	 * @return The list of tac generated for the ast, returns null if an error
	 *         occured
	 */
	public List<Quadruple> runIntermediateCodeGenerator(AST ast, boolean silent);

	/**
	 * Run the currently selected backend
	 * 
	 * @param tac
	 *            The tac to generated target code for
	 * @param silent
	 *            if set to true no output of the compiler is shown in the gui
	 *            (no errorLog and no exceptions shown).
	 * @return The target code, returns null if an error occured
	 */
	public Map<String, InputStream> runBackend(List<Quadruple> tac, boolean silent);

	/**
	 * Show the tab for the given controller (select it, make it active)
	 * 
	 * @param controller
	 *            The controller to show the tabe for
	 */
	public void showTab(Controller controller);
}
