/**
 * 
 */
package lexer;

import static org.junit.Assert.*;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Collection;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import swp_compiler_ss13.common.lexer.LexerClass;
import swp_compiler_ss13.common.lexer.TokenClass;

/**
 * @author Ho, Tay Phuong
 *
 */
@RunWith(value = Parameterized.class)
public class reducedLexerTest {
	private InputStream stream;
	private LexerClass lexer;
	 
	@Parameters
	 public static Collection<Object[]> data() {
	   Object[][] data = new Object[][] { 
		   { "~/common/examples/m1/add.prog" },
		   { "~/common/examples/m1/error_double_decl.prog" },
		   { "~/common/examples/m1/error_invalid_ids.prog" },
		   { "~/common/examples/m1/error_multiple_minus_e_notation.prog" },
		   { "~/common/examples/m1/error_multiple_pluses_in_exp.prog" },
		   { "~/common/examples/m1/error_undef_return.prog" },
		   { "~/common/examples/m1/paratheses.prog" },
		   { "~/common/examples/m1/simple_add.prog" },
		   { "~/common/examples/m1/simple_mul.prog" }
	   };
	   return Arrays.asList(data);
	 }

	 public reducedLexerTest(String fileLocation) throws Exception {
	    this.stream = new FileInputStream(fileLocation);
	 }
	 
	@Before
	public void setUp() throws Exception {
		this.lexer = new LexerClass();
		this.lexer.setSourceStream(this.stream);
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testsetSourceStream() throws IOException {
		assertTrue(this.lexer.inputstream != null);

		assertEquals(this.stream.read() != -1, this.lexer.inputstream.read() != -1);
	}

	@Test
	public void testgetNextToken() {
		TokenClass token = this.lexer.getNextToken();
		
		assertTrue(token != null);
	}
	
}
